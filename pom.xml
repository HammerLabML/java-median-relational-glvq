<?xml version="1.0" encoding="UTF-8"?>
<!--
Median Relational Generalized Learning Vector Quantization

Copyright (C) 2017-2018
Benjamin Paaßen
AG Machine Learning
Centre of Excellence Cognitive Interaction Technology (CITEC)
University of Bielefeld

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>de.cit-ec.ml</groupId>
	<artifactId>mrglvq</artifactId>
	<version>0.1.0</version>
	<packaging>jar</packaging>
	<name>Median Relational Generalized Learning Vector Quantization</name>
	<description>
		This project contains a Java implementation of median relational generalized learning vector
		quantization as proposed by Nebel, Hammer, Frohberg, and Villmann
		(2015, doi:10.1016/j.neucom.2014.12.096). Given a matrix of pairwise distances D and a
		vector of labels Y it identifies prototypical data points (i.e. rows of D) which help
		to classify the data set using a simple nearest neighbor rule. In particular, the algorithm
		optimizes the generalized learning vector quantization cost function (Sato and Yamada, 1995)
		via an expectation maximization scheme where in each iteration one prototype 'jumps' to
		another data point in order to improve the cost function. If the cost function can not be
		improved anymore for any of the data points, the algorithm terminates.
	</description>
	<dependencies>
		<dependency>
			<groupId>de.cit-ec.ml</groupId>
			<artifactId>rng</artifactId>
			<version>1.0.0</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.10</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>1.7</maven.compiler.source>
		<maven.compiler.target>1.7</maven.compiler.target>
	</properties>

	<licenses>
		<license>
			<name>The GNU General Public License, Version 3</name>
			<url>https://gnu.org/licenses/gpl.html</url>
		</license>
	</licenses>
	<developers>
		<developer>
			<name>Benjamin Paaßen</name>
			<email>bpaassen@techfak.uni-bielefeld.de</email>
			<organization>Centre of Excellence - Cognitive Interaction Technology (CITEC),
				Faculty of Technology,
				Bielefeld University</organization>
			<organizationUrl>https://cit-ec.de/tcs</organizationUrl>
		</developer>
	</developers>

	<!-- Default build properties -->
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
			<!-- javadoc plugin for javadoc generation without Netbeans -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.10.3</version>
				<configuration>
					<bottom>Copyright (C) 2018 Benjamin Paaßen, AG Machine Learning, Centre of Excellence Cognitive Interaction Technology (CITEC), University of Bielefeld, licensed under the GPL v. 3: http://openresearch.cit-ec.de/projects/tcs . This documentation is licensed under the conditions of CC-BY-SA 4.0: https://creativecommons.org/licenses/by-sa/4.0/</bottom>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<!-- Profile for including all dependencies -->
		<profile> 
			<id>include</id>
			<build>
				<plugins>
					<!-- Assembly plugin for including dependencies in the .jar -->
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
							<appendAssemblyId>false</appendAssemblyId>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
